// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package lex

import (
	"fmt"
	"io"
	"math"
	"sort"

	util "github.com/bluesky-social/indigo/lex/util"
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ProfileRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if t.DisplayName == nil {
		fieldCount--
	}

	if t.DefaultNick == nil {
		fieldCount--
	}

	if t.Status == nil {
		fieldCount--
	}

	if t.Avatar == nil {
		fieldCount--
	}

	if t.Color == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 8192 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("org.xcvr.actor.profile"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("org.xcvr.actor.profile")); err != nil {
		return err
	}

	// t.Color (uint64) (uint64)
	if t.Color != nil {

		if len("color") > 8192 {
			return xerrors.Errorf("Value in field \"color\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("color"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("color")); err != nil {
			return err
		}

		if t.Color == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(*t.Color)); err != nil {
				return err
			}
		}

	}

	// t.Avatar (util.LexBlob) (struct)
	if t.Avatar != nil {

		if len("avatar") > 8192 {
			return xerrors.Errorf("Value in field \"avatar\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("avatar"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("avatar")); err != nil {
			return err
		}

		if err := t.Avatar.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Status (string) (string)
	if t.Status != nil {

		if len("status") > 8192 {
			return xerrors.Errorf("Value in field \"status\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("status"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("status")); err != nil {
			return err
		}

		if t.Status == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Status) > 8192 {
				return xerrors.Errorf("Value in field t.Status was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Status))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Status)); err != nil {
				return err
			}
		}
	}

	// t.DefaultNick (string) (string)
	if t.DefaultNick != nil {

		if len("defaultNick") > 8192 {
			return xerrors.Errorf("Value in field \"defaultNick\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("defaultNick"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("defaultNick")); err != nil {
			return err
		}

		if t.DefaultNick == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.DefaultNick) > 8192 {
				return xerrors.Errorf("Value in field t.DefaultNick was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.DefaultNick))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.DefaultNick)); err != nil {
				return err
			}
		}
	}

	// t.DisplayName (string) (string)
	if t.DisplayName != nil {

		if len("displayName") > 8192 {
			return xerrors.Errorf("Value in field \"displayName\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("displayName"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("displayName")); err != nil {
			return err
		}

		if t.DisplayName == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.DisplayName) > 8192 {
				return xerrors.Errorf("Value in field t.DisplayName was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.DisplayName))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.DisplayName)); err != nil {
				return err
			}
		}
	}
	return nil
}

func (t *ProfileRecord) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ProfileRecord{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ProfileRecord: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 11)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Color (uint64) (uint64)
		case "color":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}
					if maj != cbg.MajUnsignedInt {
						return fmt.Errorf("wrong type for uint64 field")
					}
					typed := uint64(extra)
					t.Color = &typed
				}

			}
			// t.Avatar (util.LexBlob) (struct)
		case "avatar":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Avatar = new(util.LexBlob)
					if err := t.Avatar.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Avatar pointer: %w", err)
					}
				}

			}
			// t.Status (string) (string)
		case "status":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.Status = (*string)(&sval)
				}
			}
			// t.DefaultNick (string) (string)
		case "defaultNick":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.DefaultNick = (*string)(&sval)
				}
			}
			// t.DisplayName (string) (string)
		case "displayName":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.DisplayName = (*string)(&sval)
				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *ChannelRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 5

	if t.Topic == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Host (string) (string)
	if len("host") > 8192 {
		return xerrors.Errorf("Value in field \"host\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("host"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("host")); err != nil {
		return err
	}

	if len(t.Host) > 8192 {
		return xerrors.Errorf("Value in field t.Host was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Host))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Host)); err != nil {
		return err
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 8192 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("org.xcvr.feed.channel"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("org.xcvr.feed.channel")); err != nil {
		return err
	}

	// t.Title (string) (string)
	if len("title") > 8192 {
		return xerrors.Errorf("Value in field \"title\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("title"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("title")); err != nil {
		return err
	}

	if len(t.Title) > 8192 {
		return xerrors.Errorf("Value in field t.Title was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Title))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Title)); err != nil {
		return err
	}

	// t.Topic (string) (string)
	if t.Topic != nil {

		if len("topic") > 8192 {
			return xerrors.Errorf("Value in field \"topic\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("topic"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("topic")); err != nil {
			return err
		}

		if t.Topic == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Topic) > 8192 {
				return xerrors.Errorf("Value in field t.Topic was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Topic))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Topic)); err != nil {
				return err
			}
		}
	}

	// t.CreatedAt (string) (string)
	if len("createdAt") > 8192 {
		return xerrors.Errorf("Value in field \"createdAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("createdAt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("createdAt")); err != nil {
		return err
	}

	if len(t.CreatedAt) > 8192 {
		return xerrors.Errorf("Value in field t.CreatedAt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CreatedAt))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.CreatedAt)); err != nil {
		return err
	}
	return nil
}

func (t *ChannelRecord) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ChannelRecord{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ChannelRecord: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 9)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Host (string) (string)
		case "host":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Host = string(sval)
			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Title (string) (string)
		case "title":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Title = string(sval)
			}
			// t.Topic (string) (string)
		case "topic":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.Topic = (*string)(&sval)
				}
			}
			// t.CreatedAt (string) (string)
		case "createdAt":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.CreatedAt = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *MessageRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if t.Nick == nil {
		fieldCount--
	}

	if t.Color == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Body (string) (string)
	if len("body") > 8192 {
		return xerrors.Errorf("Value in field \"body\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("body"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("body")); err != nil {
		return err
	}

	if len(t.Body) > 8192 {
		return xerrors.Errorf("Value in field t.Body was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Body))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Body)); err != nil {
		return err
	}

	// t.Nick (string) (string)
	if t.Nick != nil {

		if len("nick") > 8192 {
			return xerrors.Errorf("Value in field \"nick\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("nick"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("nick")); err != nil {
			return err
		}

		if t.Nick == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Nick) > 8192 {
				return xerrors.Errorf("Value in field t.Nick was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Nick))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Nick)); err != nil {
				return err
			}
		}
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 8192 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("org.xcvr.lrc.message"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("org.xcvr.lrc.message")); err != nil {
		return err
	}

	// t.Color (uint64) (uint64)
	if t.Color != nil {

		if len("color") > 8192 {
			return xerrors.Errorf("Value in field \"color\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("color"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("color")); err != nil {
			return err
		}

		if t.Color == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(*t.Color)); err != nil {
				return err
			}
		}

	}

	// t.PostedAt (string) (string)
	if len("postedAt") > 8192 {
		return xerrors.Errorf("Value in field \"postedAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("postedAt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("postedAt")); err != nil {
		return err
	}

	if len(t.PostedAt) > 8192 {
		return xerrors.Errorf("Value in field t.PostedAt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.PostedAt))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.PostedAt)); err != nil {
		return err
	}

	// t.SignetURI (string) (string)
	if len("signetURI") > 8192 {
		return xerrors.Errorf("Value in field \"signetURI\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("signetURI"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("signetURI")); err != nil {
		return err
	}

	if len(t.SignetURI) > 8192 {
		return xerrors.Errorf("Value in field t.SignetURI was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.SignetURI))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.SignetURI)); err != nil {
		return err
	}
	return nil
}

func (t *MessageRecord) UnmarshalCBOR(r io.Reader) (err error) {
	*t = MessageRecord{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("MessageRecord: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 9)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Body (string) (string)
		case "body":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Body = string(sval)
			}
			// t.Nick (string) (string)
		case "nick":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.Nick = (*string)(&sval)
				}
			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Color (uint64) (uint64)
		case "color":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}
					if maj != cbg.MajUnsignedInt {
						return fmt.Errorf("wrong type for uint64 field")
					}
					typed := uint64(extra)
					t.Color = &typed
				}

			}
			// t.PostedAt (string) (string)
		case "postedAt":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.PostedAt = string(sval)
			}
			// t.SignetURI (string) (string)
		case "signetURI":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.SignetURI = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *SignetRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 5

	if t.StartedAt == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 8192 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("org.xcvr.lrc.signet"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("org.xcvr.lrc.signet")); err != nil {
		return err
	}

	// t.LRCID (uint64) (uint64)
	if len("lrcID") > 8192 {
		return xerrors.Errorf("Value in field \"lrcID\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("lrcID"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("lrcID")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.LRCID)); err != nil {
		return err
	}

	// t.StartedAt (string) (string)
	if t.StartedAt != nil {

		if len("startedAt") > 8192 {
			return xerrors.Errorf("Value in field \"startedAt\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("startedAt"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("startedAt")); err != nil {
			return err
		}

		if t.StartedAt == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.StartedAt) > 8192 {
				return xerrors.Errorf("Value in field t.StartedAt was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.StartedAt))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.StartedAt)); err != nil {
				return err
			}
		}
	}

	// t.ChannelURI (string) (string)
	if len("channelURI") > 8192 {
		return xerrors.Errorf("Value in field \"channelURI\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("channelURI"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("channelURI")); err != nil {
		return err
	}

	if len(t.ChannelURI) > 8192 {
		return xerrors.Errorf("Value in field t.ChannelURI was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ChannelURI))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.ChannelURI)); err != nil {
		return err
	}

	// t.AuthorHandle (string) (string)
	if len("authorHandle") > 8192 {
		return xerrors.Errorf("Value in field \"authorHandle\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("authorHandle"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("authorHandle")); err != nil {
		return err
	}

	if len(t.AuthorHandle) > 8192 {
		return xerrors.Errorf("Value in field t.AuthorHandle was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.AuthorHandle))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.AuthorHandle)); err != nil {
		return err
	}
	return nil
}

func (t *SignetRecord) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SignetRecord{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SignetRecord: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 12)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.LRCID (uint64) (uint64)
		case "lrcID":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.LRCID = uint64(extra)

			}
			// t.StartedAt (string) (string)
		case "startedAt":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.StartedAt = (*string)(&sval)
				}
			}
			// t.ChannelURI (string) (string)
		case "channelURI":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.ChannelURI = string(sval)
			}
			// t.AuthorHandle (string) (string)
		case "authorHandle":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.AuthorHandle = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *AspectRatio) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Width (int64) (int64)
	if len("width") > 8192 {
		return xerrors.Errorf("Value in field \"width\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("width"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("width")); err != nil {
		return err
	}

	if t.Width >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Width)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Width-1)); err != nil {
			return err
		}
	}

	// t.Height (int64) (int64)
	if len("height") > 8192 {
		return xerrors.Errorf("Value in field \"height\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("height"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("height")); err != nil {
		return err
	}

	if t.Height >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Height)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Height-1)); err != nil {
			return err
		}
	}

	return nil
}

func (t *AspectRatio) UnmarshalCBOR(r io.Reader) (err error) {
	*t = AspectRatio{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("AspectRatio: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 6)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Width (int64) (int64)
		case "width":
			{
				maj, extra, err := cr.ReadHeader()
				if err != nil {
					return err
				}
				var extraI int64
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Width = int64(extraI)
			}
			// t.Height (int64) (int64)
		case "height":
			{
				maj, extra, err := cr.ReadHeader()
				if err != nil {
					return err
				}
				var extraI int64
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Height = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *Image) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 4

	if t.AspectRatio == nil {
		fieldCount--
	}

	if t.Blob == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Alt (string) (string)
	if len("alt") > 8192 {
		return xerrors.Errorf("Value in field \"alt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("alt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("alt")); err != nil {
		return err
	}

	if len(t.Alt) > 8192 {
		return xerrors.Errorf("Value in field t.Alt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Alt))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Alt)); err != nil {
		return err
	}

	// t.Blob (util.BlobSchema) (struct)
	if t.Blob != nil {

		if len("blob") > 8192 {
			return xerrors.Errorf("Value in field \"blob\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("blob"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("blob")); err != nil {
			return err
		}

		if err := t.Blob.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 8192 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("org.xcvr.lrc.image"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("org.xcvr.lrc.image")); err != nil {
		return err
	}

	// t.AspectRatio (lex.AspectRatio) (struct)
	if t.AspectRatio != nil {

		if len("aspectRatio") > 8192 {
			return xerrors.Errorf("Value in field \"aspectRatio\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("aspectRatio"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("aspectRatio")); err != nil {
			return err
		}

		if err := t.AspectRatio.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *Image) UnmarshalCBOR(r io.Reader) (err error) {
	*t = Image{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Image: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 11)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Alt (string) (string)
		case "alt":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Alt = string(sval)
			}
			// t.Blob (util.BlobSchema) (struct)
		case "blob":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Blob = new(util.BlobSchema)
					if err := t.Blob.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Blob pointer: %w", err)
					}
				}

			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.AspectRatio (lex.AspectRatio) (struct)
		case "aspectRatio":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.AspectRatio = new(AspectRatio)
					if err := t.AspectRatio.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.AspectRatio pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *MediaRecord) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 6

	if t.Image == nil {
		fieldCount--
	}

	if t.Nick == nil {
		fieldCount--
	}

	if t.Color == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Nick (string) (string)
	if t.Nick != nil {

		if len("nick") > 8192 {
			return xerrors.Errorf("Value in field \"nick\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("nick"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("nick")); err != nil {
			return err
		}

		if t.Nick == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if len(*t.Nick) > 8192 {
				return xerrors.Errorf("Value in field t.Nick was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(*t.Nick))); err != nil {
				return err
			}
			if _, err := cw.WriteString(string(*t.Nick)); err != nil {
				return err
			}
		}
	}

	// t.LexiconTypeID (string) (string)
	if len("$type") > 8192 {
		return xerrors.Errorf("Value in field \"$type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("$type"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("$type")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("org.xcvr.lrc.media"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("org.xcvr.lrc.media")); err != nil {
		return err
	}

	// t.Color (uint64) (uint64)
	if t.Color != nil {

		if len("color") > 8192 {
			return xerrors.Errorf("Value in field \"color\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("color"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("color")); err != nil {
			return err
		}

		if t.Color == nil {
			if _, err := cw.Write(cbg.CborNull); err != nil {
				return err
			}
		} else {
			if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(*t.Color)); err != nil {
				return err
			}
		}

	}

	// t.Image (lex.Image) (struct)
	if t.Image != nil {

		if len("image") > 8192 {
			return xerrors.Errorf("Value in field \"image\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("image"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("image")); err != nil {
			return err
		}

		if err := t.Image.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.PostedAt (string) (string)
	if len("postedAt") > 8192 {
		return xerrors.Errorf("Value in field \"postedAt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("postedAt"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("postedAt")); err != nil {
		return err
	}

	if len(t.PostedAt) > 8192 {
		return xerrors.Errorf("Value in field t.PostedAt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.PostedAt))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.PostedAt)); err != nil {
		return err
	}

	// t.SignetURI (string) (string)
	if len("signetURI") > 8192 {
		return xerrors.Errorf("Value in field \"signetURI\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("signetURI"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("signetURI")); err != nil {
		return err
	}

	if len(t.SignetURI) > 8192 {
		return xerrors.Errorf("Value in field t.SignetURI was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.SignetURI))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.SignetURI)); err != nil {
		return err
	}
	return nil
}

func (t *MediaRecord) UnmarshalCBOR(r io.Reader) (err error) {
	*t = MediaRecord{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("MediaRecord: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 9)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Nick (string) (string)
		case "nick":

			{
				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					sval, err := cbg.ReadStringWithMax(cr, 8192)
					if err != nil {
						return err
					}

					t.Nick = (*string)(&sval)
				}
			}
			// t.LexiconTypeID (string) (string)
		case "$type":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.LexiconTypeID = string(sval)
			}
			// t.Color (uint64) (uint64)
		case "color":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					maj, extra, err = cr.ReadHeader()
					if err != nil {
						return err
					}
					if maj != cbg.MajUnsignedInt {
						return fmt.Errorf("wrong type for uint64 field")
					}
					typed := uint64(extra)
					t.Color = &typed
				}

			}
			// t.Image (lex.Image) (struct)
		case "image":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Image = new(Image)
					if err := t.Image.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Image pointer: %w", err)
					}
				}

			}
			// t.PostedAt (string) (string)
		case "postedAt":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.PostedAt = string(sval)
			}
			// t.SignetURI (string) (string)
		case "signetURI":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.SignetURI = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
